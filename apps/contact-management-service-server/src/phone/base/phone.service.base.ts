/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Phone as PrismaPhone,
  Contact as PrismaContact,
} from "@prisma/client";

export class PhoneServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PhoneCountArgs, "select">): Promise<number> {
    return this.prisma.phone.count(args);
  }

  async phones(args: Prisma.PhoneFindManyArgs): Promise<PrismaPhone[]> {
    return this.prisma.phone.findMany(args);
  }
  async phone(args: Prisma.PhoneFindUniqueArgs): Promise<PrismaPhone | null> {
    return this.prisma.phone.findUnique(args);
  }
  async createPhone(args: Prisma.PhoneCreateArgs): Promise<PrismaPhone> {
    return this.prisma.phone.create(args);
  }
  async updatePhone(args: Prisma.PhoneUpdateArgs): Promise<PrismaPhone> {
    return this.prisma.phone.update(args);
  }
  async deletePhone(args: Prisma.PhoneDeleteArgs): Promise<PrismaPhone> {
    return this.prisma.phone.delete(args);
  }

  async findContacts(
    parentId: string,
    args: Prisma.ContactFindManyArgs
  ): Promise<PrismaContact[]> {
    return this.prisma.phone
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .contacts(args);
  }
}
