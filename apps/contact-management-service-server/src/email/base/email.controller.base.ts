/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmailService } from "../email.service";
import { EmailCreateInput } from "./EmailCreateInput";
import { Email } from "./Email";
import { EmailFindManyArgs } from "./EmailFindManyArgs";
import { EmailWhereUniqueInput } from "./EmailWhereUniqueInput";
import { EmailUpdateInput } from "./EmailUpdateInput";
import { ContactFindManyArgs } from "../../contact/base/ContactFindManyArgs";
import { Contact } from "../../contact/base/Contact";
import { ContactWhereUniqueInput } from "../../contact/base/ContactWhereUniqueInput";

export class EmailControllerBase {
  constructor(protected readonly service: EmailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Email })
  async createEmail(@common.Body() data: EmailCreateInput): Promise<Email> {
    return await this.service.createEmail({
      data: data,
      select: {
        createdAt: true,
        emailAddress: true,
        id: true,
        notes: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Email] })
  @ApiNestedQuery(EmailFindManyArgs)
  async emails(@common.Req() request: Request): Promise<Email[]> {
    const args = plainToClass(EmailFindManyArgs, request.query);
    return this.service.emails({
      ...args,
      select: {
        createdAt: true,
        emailAddress: true,
        id: true,
        notes: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Email })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async email(
    @common.Param() params: EmailWhereUniqueInput
  ): Promise<Email | null> {
    const result = await this.service.email({
      where: params,
      select: {
        createdAt: true,
        emailAddress: true,
        id: true,
        notes: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Email })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmail(
    @common.Param() params: EmailWhereUniqueInput,
    @common.Body() data: EmailUpdateInput
  ): Promise<Email | null> {
    try {
      return await this.service.updateEmail({
        where: params,
        data: data,
        select: {
          createdAt: true,
          emailAddress: true,
          id: true,
          notes: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Email })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmail(
    @common.Param() params: EmailWhereUniqueInput
  ): Promise<Email | null> {
    try {
      return await this.service.deleteEmail({
        where: params,
        select: {
          createdAt: true,
          emailAddress: true,
          id: true,
          notes: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/contacts")
  @ApiNestedQuery(ContactFindManyArgs)
  async findContacts(
    @common.Req() request: Request,
    @common.Param() params: EmailWhereUniqueInput
  ): Promise<Contact[]> {
    const query = plainToClass(ContactFindManyArgs, request.query);
    const results = await this.service.findContacts(params.id, {
      ...query,
      select: {
        address: {
          select: {
            id: true,
          },
        },

        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        email: {
          select: {
            id: true,
          },
        },

        firstName: true,
        id: true,
        jobTitle: true,
        lastName: true,
        notes: true,

        phone: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contacts")
  async connectContacts(
    @common.Param() params: EmailWhereUniqueInput,
    @common.Body() body: ContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contacts: {
        connect: body,
      },
    };
    await this.service.updateEmail({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contacts")
  async updateContacts(
    @common.Param() params: EmailWhereUniqueInput,
    @common.Body() body: ContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contacts: {
        set: body,
      },
    };
    await this.service.updateEmail({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contacts")
  async disconnectContacts(
    @common.Param() params: EmailWhereUniqueInput,
    @common.Body() body: ContactWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contacts: {
        disconnect: body,
      },
    };
    await this.service.updateEmail({
      where: params,
      data,
      select: { id: true },
    });
  }
}
